syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}
  rpc GetRace(GetRaceRequest) returns (Race) {}
}

/* Requests/Responses */

message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
  // Orders the response by the given order string. See https://cloud.google.com/apis/design/design_patterns#sorting_order
  optional string order_by = 2;
}

// Request for GetRace call.
message GetRaceRequest {
  // The unique id of the race.
  int64 id = 1;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  // Returns Races that have `visible` set to the requested value.
  optional bool visible = 2;
}

/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  enum Status {
    CLOSED = 0;
    OPEN = 1;
  }
  // Status reflects whether the Race is open or closed, based off the 
  // advertised start time being in the past.
  Status status = 7;
}

